#cloud-config
ssh_authorized_keys:
  - %(LOCAL_SSH_KEY)s
# bootcmd:
# - set -ex
# - cloud-init-per once accepted-oracle-license-v1-1 echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 select true" | debconf-set-selections
# - cloud-init-per once fallocate-swapfile fallocate -l 4G /swapfile
# - cloud-init-per once chmod-swapfile chmod 600 /swapfile
# - cloud-init-per once mkswap-swapfile mkswap /swapfile
  #package_upgrade: true
packages:
- awscli
#- apache2-mpm-worker
#- bsdtar
#- build-essential
#- elasticsearch
#- git
#- graphviz
#- libapache2-mod-wsgi-py3
#- libevent-dev
#- libfreetype6-dev
#- libjpeg-dev
#- liblcms2-dev
#- libmagic-dev
#- libpq-dev
#- libssl-dev
#- libtiff5-dev
#- libwebp-dev
#- libxml2-dev
#- libxslt1-dev
#- lzop
#- nodejs
#- ntp
#- oracle-java8-installer
#- oracle-java8-set-default
#- postgresql-9.3
#- pv
#- python2.7-dev
#- python3.4-dev
#- python3-pip
#- python-software-properties
#- python-virtualenv
#- ruby-dev
#- unattended-upgrades
#- update-notifier-common
#- zlib1g-dev
#- libffi-dev
#- bsd-mailx
#power_state:
#  mode: reboot
#output:
#  all: '| tee -a /var/log/cloud-init-output.log'
runcmd:
- sudo -u ubuntu cp /home/ubuntu/.ssh/authorized_keys /home/ubuntu/.ssh/authorized_keys2
- sudo -u ubuntu aws s3 cp --region=us-west-2 %(S3_AUTH_KEYS)s /home/ubuntu/.ssh/authorized_keys
#- MEMGIGS=$(awk '/MemTotal/{printf "%%.0f", $2 / 1024**2}' /proc/meminfo)
#- if [ "$MEMGIGS" -gt 32 ]
#- then
#-    echo "-Xms8g" >> /etc/elasticsearch/jvm.options
#-    echo "-Xmx8g" >> /etc/elasticsearch/jvm.options
#- elif [ "$MEMGIGS" -gt 12 ]
#- then
#-    echo "-Xms4g" >> /etc/elasticsearch/jvm.options
#-    echo "-Xmx4g" >> /etc/elasticsearch/jvm.options
#- else
#-    echo "-Xms2g" >> /etc/elasticsearch/jvm.options
#-    echo "-Xmx2g" >> /etc/elasticsearch/jvm.options
#-    sysctl "vm.swappiness=1"
#-    swapon /swapfile
#- fi
#- set -ex
#- update-rc.d elasticsearch defaults
#- service elasticsearch restart
#- chown postgres:postgres /etc/postgresql/9.3/main/*.conf
#- echo "include 'custom.conf'" >> /etc/postgresql/9.3/main/postgresql.conf
#- if test "%(ROLE)s" != "candidate"
#- then
#-   echo "standby_mode = off" >> /etc/postgresql/9.3/main/recovery.conf
#-   echo "include 'demo.conf'" >> /etc/postgresql/9.3/main/postgresql.conf
#- fi
#- sudo -u postgres createuser encoded
#- sudo -u postgres createdb --owner=encoded encoded
#- mkdir /srv/encoded
#- chown encoded:encoded /srv/encoded
#- cd /srv/encoded
#- sudo -u encoded git clone --no-checkout %(GIT_REPO)s .
#- sudo -u encoded git checkout %(COMMIT)s
#- mkdir /opt/cloudwatchmon
#- chown build:build /opt/cloudwatchmon
#- sudo -u build virtualenv --python=python2.7 /opt/cloudwatchmon
#- sudo -u build /opt/cloudwatchmon/bin/pip install -r cloudwatchmon-requirements.txt
#- mkdir /opt/wal-e
#- chown postgres:postgres /opt/wal-e
#- sudo -u postgres virtualenv --python=python2.7 /opt/wal-e
#- sudo -u postgres /opt/wal-e/bin/pip install -r wal-e-requirements.txt
#- /etc/init.d/postgresql stop
#- sudo -u postgres /opt/wal-e/bin/wal-e --aws-instance-profile --s3-prefix="$(cat /etc/postgresql/9.3/main/wale_s3_prefix)" backup-fetch /var/lib/postgresql/9.3/main LATEST
#- sudo -u postgres ln -s /etc/postgresql/9.3/main/recovery.conf /var/lib/postgresql/9.3/main/
#- /etc/init.d/postgresql start
#- sudo pip3 install -U zc.buildout setuptools
#- sudo -u encoded buildout bootstrap
#- sudo -u encoded LANG=en_US.UTF-8 bin/buildout -c %(ROLE)s.cfg buildout:es-ip=%(ES_IP)s buildout:es-port=%(ES_PORT)s
#- sudo -u encoded bin/aws s3 cp --recursive s3://encoded-conf-prod/.aws .aws
#- until sudo -u postgres psql postgres -c ""; do sleep 10; done
#- sudo -u encoded sh -c 'cat /dev/urandom | head -c 256 | base64 > session-secret.b64'
#- sudo -u encoded bin/create-mapping production.ini --app-name app
#- sudo -u encoded bin/index-annotations production.ini --app-name app
#- if test "%(REGION_INDEX)s" = "False"
#- then
#-    sudo -u encoded cp /srv/encoded/etc/encoded-apache.conf /srv/encoded/etc/encoded-apache.conf.original
#-    sudo -u encoded sh -c "grep -v encoded\-regionindexer /srv/encoded/etc/encoded-apache.conf.original | grep -v _region > /srv/encoded/etc/encoded-apache.conf"
#-    sudo -u encoded cp /srv/encoded/base.ini /srv/encoded/base.ini.original
#-    sudo -u encoded sh -c "sed 's/vis_indexer, region_indexer/vis_indexer/' /srv/encoded/base.ini.original > /srv/encoded/base.ini"
#- fi
#- ln -s /srv/encoded/etc/encoded-apache.conf /etc/apache2/sites-available/encoded.conf
#- ln -s /srv/encoded/etc/logging-apache.conf /etc/apache2/conf-available/logging.conf
#- a2enmod headers
#- a2enmod proxy_http
#- a2enmod rewrite
#- a2enmod ssl
#- a2ensite encoded.conf
#- a2dissite 000-default
#- a2enconf logging
#- a2disconf charset
#- a2disconf security
#- a2disconf localized-error-pages
#- a2disconf other-vhosts-access-log
#- a2disconf serve-cgi-bin
#- if test "%(ROLE)s" = "demo"
#- then
#-   sudo -i -u encoded bin/batchupgrade production.ini --app-name app
#- fi
#- sudo sed -i -e 's/inet_interfaces = all/inet_interfaces = loopback-only/g' /etc/postfix/main.cf
#- PUBLIC_DNS_NAME="$(curl http://169.254.169.254/latest/meta-data/public-hostname)"
#- sudo sed -i "/myhostname/c\myhostname = $PUBLIC_DNS_NAME" /etc/postfix/main.cf
#- sudo echo "127.0.0.0 $PUBLIC_DNS_NAME" | sudo tee --append /etc/hosts
#- sudo mv /etc/mailname /etc/mailname.OLD
#- sudo echo "$PUBLIC_DNS_NAME" | sudo tee --append /etc/mailname
#- sudo service postfix restart
users:
- default
- name: encoded
  gecos: ENCODE Metadata Database daemon user
  inactive: true
  system: true
  homedir: /srv/encoded
# - name: build
#   gecos: Build user
#   inactive: true
#   system: true
#write_files:
#- path: /etc/apt/apt.conf.d/20auto-upgrades
#  content: |
#    APT::Periodic::Update-Package-Lists "1";
#    APT::Periodic::Unattended-Upgrade "1";
#- path: /etc/apt/apt.conf.d/50unattended-upgrades
#  content: |
#    Unattended-Upgrade::Allowed-Origins {
#        "${distro_id} ${distro_codename}-security";
#    };
#    Unattended-Upgrade::Mail "encode-devops@lists.stanford.edu";
#    Unattended-Upgrade::Automatic-Reboot "false";
#- path: /etc/cron.d/cloudwatchmon
#  content: |
#    */5 * * * * nobody /opt/cloudwatchmon/bin/mon-put-instance-stats.py --mem-util --swap-util --disk-space-util --disk-path=/ --from-cron
#- path: /etc/elasticsearch/elasticsearch.yml
#  content: |
#    http.port: 9201
#    thread_pool:
#        search:
#            size: 100
#            queue_size: 2000
#        index:
#            queue_size: 400
#    indices.query.bool.max_clause_count: 8192
#- path: /etc/elasticsearch/jvm.options
#  content: |
#    -XX:+UseConcMarkSweepGC
#    -XX:CMSInitiatingOccupancyFraction=75
#    -XX:+UseCMSInitiatingOccupancyOnly
#    -XX:+DisableExplicitGC
#    -XX:+AlwaysPreTouch
#    -server
#    -Xss1m
#    -Djava.awt.headless=true
#    -Dfile.encoding=UTF-8
#    -Djna.nosys=true
#    -Djdk.io.permissionsUseCanonicalPath=true
#    -Dio.netty.noUnsafe=true
#    -Dio.netty.noKeySetOptimization=true
#    -Dio.netty.recycler.maxCapacityPerThread=0
#    -Dlog4j.shutdownHookEnabled=false
#    -Dlog4j2.disable.jmx=true
#    -Dlog4j.skipJansi=true
#    -XX:+HeapDumpOnOutOfMemoryError
#- path: /etc/postgresql/9.3/main/custom.conf
#  content: |
#    hot_standby = on
#    max_standby_archive_delay = -1
#    wal_level = hot_standby
#    archive_mode = on
#    archive_timeout = 60
#    checkpoint_timeout = 1h
#- path: /etc/postgresql/9.3/main/demo.conf
#  content: |
#    archive_mode = off
#- path: /etc/postgresql/9.3/main/master.conf
#  content: |
#    archive_command = '/opt/wal-e/bin/envfile --config ~postgres/.aws/credentials --section default --upper -- /opt/wal-e/bin/wal-e --s3-prefix="$(cat /etc/postgresql/9.3/main/wale_s3_prefix)" wal-push "%%p"'
#- path: /etc/postgresql/9.3/main/recovery.conf
#  content: |
#    recovery_target_timeline = 'latest'
#    restore_command = '/opt/wal-e/bin/wal-e --aws-instance-profile --s3-prefix="$(cat /etc/postgresql/9.3/main/wale_s3_prefix)" wal-fetch "%%f" "%%p"'
#    standby_mode = on
#- path: /etc/postgresql/9.3/main/wale_s3_prefix
#  content: "%(WALE_S3_PREFIX)s"
